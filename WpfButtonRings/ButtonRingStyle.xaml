<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime"
                    xmlns:local="clr-namespace:Fairybells.WpfButtonRings">

    <!-- Default style for ButtonRings -->
    <Style TargetType="{x:Type local:ButtonRing}">
        <Setter Property="Height" Value="{Binding Path=ControlSize, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Width" Value="{Binding Path=ControlSize, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ButtonRing}">
                    <Border Height="{TemplateBinding ControlSize}" Width="{TemplateBinding ControlSize}">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for ButtonRingItems -->
    <Style TargetType="{x:Type local:ButtonRingItem}">
        <Style.Resources>
            <local:ButtonRingMultiValueConverter x:Key="ButtonRingMultiValueConverter" />
            <SolidColorBrush Color="CornflowerBlue" x:Key="ButtonDefaultColor" />
            <SolidColorBrush Color="LightGray" x:Key="ButtonDisabledColor" />
            <SolidColorBrush Color="Gold" x:Key="ButtonHoverColor" />
            <SolidColorBrush Color="Goldenrod" x:Key="ButtonPressedColor" />
            <SolidColorBrush Color="Black" x:Key="ButtonTextColor" />
            <SolidColorBrush Color="Gray" x:Key="ButtonDisabledTextColor" />
            <Style TargetType="{x:Type Button}" x:Key="ArcButtonStyle">
                <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Border}}}" />
                <Setter Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Border}}}" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Foreground" Value="{StaticResource ButtonTextColor}" />
                <Setter Property="Background" Value="{StaticResource ButtonDefaultColor}" />
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <RotateTransform>
                                <RotateTransform.Angle>
                                    <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.GetRotation}">
                                        <Binding Path="ItemsSource" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                        <Binding Path="Items" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                        <Binding Path="." RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRingItem}}" />
                                    </MultiBinding>
                                </RotateTransform.Angle>
                            </RotateTransform>
                            <RotateTransform Angle="{Binding Path=RingRotation, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRing}}}" />
                            <TranslateTransform>
                                <TranslateTransform.X>
                                    <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.AddValues}">
                                        <Binding Path="OuterRadius" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                        <Binding Path="RingDistance" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                    </MultiBinding>
                                </TranslateTransform.X>
                                <TranslateTransform.Y>
                                    <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.AddValues}">
                                        <Binding Path="OuterRadius" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                        <Binding Path="RingDistance" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                    </MultiBinding>
                                </TranslateTransform.Y>
                            </TranslateTransform>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Path Fill="{TemplateBinding Background}" Stroke="{TemplateBinding Foreground}" StrokeThickness="1">
                                    <Path.Data>
                                        <CombinedGeometry GeometryCombineMode="Intersect">
                                            <CombinedGeometry.Geometry1>
                                                <PathGeometry>
                                                    <PathFigure StartPoint="0, 0" IsClosed="True" IsFilled="True">
                                                        <PathFigure.Segments>
                                                            <LineSegment>
                                                                <LineSegment.Point>
                                                                    <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.GetFirstTrianglePoint}">
                                                                        <Binding Path="ItemsSource" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="Items" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="OuterRadius" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="RingDistance" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="ButtonDistance" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="ButtonDistanceMode" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                    </MultiBinding>
                                                                </LineSegment.Point>
                                                            </LineSegment>
                                                            <LineSegment>
                                                                <LineSegment.Point>
                                                                    <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.GetSecondTrianglePoint}">
                                                                        <Binding Path="ItemsSource" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="Items" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="OuterRadius" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="RingDistance" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="ButtonDistance" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                        <Binding Path="ButtonDistanceMode" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                                    </MultiBinding>
                                                                </LineSegment.Point>
                                                            </LineSegment>
                                                        </PathFigure.Segments>
                                                    </PathFigure>
                                                </PathGeometry>
                                            </CombinedGeometry.Geometry1>
                                            <CombinedGeometry.Geometry2>
                                                <CombinedGeometry GeometryCombineMode="Exclude">
                                                    <CombinedGeometry.Geometry1>
                                                        <EllipseGeometry RadiusX="{Binding Path=OuterRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRing}}}"
                                                                     RadiusY="{Binding Path=OuterRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRing}}}">
                                                        </EllipseGeometry>
                                                    </CombinedGeometry.Geometry1>
                                                    <CombinedGeometry.Geometry2>
                                                        <EllipseGeometry RadiusX="{Binding Path=InnerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRing}}}" 
                                                                     RadiusY="{Binding Path=InnerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRing}}}">
                                                        </EllipseGeometry>
                                                    </CombinedGeometry.Geometry2>
                                                </CombinedGeometry>
                                            </CombinedGeometry.Geometry2>
                                        </CombinedGeometry>
                                    </Path.Data>
                                </Path>
                                <Border Height="{Binding Path=RingWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRing}}}"
                                        Width="{Binding Path=RingWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRing}}}"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Border.RenderTransform>
                                        <TranslateTransform>
                                            <TranslateTransform.X>
                                                <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.DivideValues}">
                                                    <Binding Path="RingWidth" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                    <Binding>
                                                        <Binding.Source>
                                                            <system:Double>-2.0</system:Double>
                                                        </Binding.Source>
                                                    </Binding>
                                                </MultiBinding>
                                            </TranslateTransform.X>
                                            <TranslateTransform.Y>
                                                <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.DivideValues}">
                                                    <Binding Path="OuterRadius" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                    <Binding>
                                                        <Binding.Source>
                                                            <system:Double>-1.0</system:Double>
                                                        </Binding.Source>
                                                    </Binding>
                                                </MultiBinding>
                                            </TranslateTransform.Y>
                                        </TranslateTransform>
                                    </Border.RenderTransform>
                                    <Viewbox Name="ContentViewBox">
                                        <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRingItem}}}" />
                                    </Viewbox>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=RotateContents, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRing}}}" Value="False">
                                    <Setter Property="RenderTransform" TargetName="ContentViewBox">
                                        <Setter.Value>
                                            <RotateTransform>
                                                <RotateTransform.Angle>
                                                    <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.GetContentRotation}">
                                                        <Binding Path="ItemsSource" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                        <Binding Path="Items" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                        <Binding Path="." RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRingItem}}" />
                                                        <Binding Path="RingRotation" RelativeSource="{RelativeSource AncestorType={x:Type local:ButtonRing}}" />
                                                    </MultiBinding>
                                                </RotateTransform.Angle>
                                                <RotateTransform.CenterX>
                                                    <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.DivideValues}">
                                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Border}}" />
                                                        <Binding>
                                                            <Binding.Source>
                                                                <system:Double>2.0</system:Double>
                                                            </Binding.Source>
                                                        </Binding>
                                                    </MultiBinding>
                                                </RotateTransform.CenterX>
                                                <RotateTransform.CenterY>
                                                    <MultiBinding Converter="{StaticResource ButtonRingMultiValueConverter}" ConverterParameter="{x:Static local:ButtonRingMultiValueConverter+ConverterOperation.DivideValues}">
                                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Border}}" />
                                                        <Binding>
                                                            <Binding.Source>
                                                                <system:Double>2.0</system:Double>
                                                            </Binding.Source>
                                                        </Binding>
                                                    </MultiBinding>
                                                </RotateTransform.CenterY>
                                            </RotateTransform>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource ButtonHoverColor}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{StaticResource ButtonPressedColor}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="{StaticResource ButtonDisabledColor}" />
                        <Setter Property="Foreground" Value="{StaticResource ButtonDisabledTextColor}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ButtonRingItem}">
                    <Button Style="{StaticResource ArcButtonStyle}" 
                            Command="{Binding Path=Command, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRingItem}}}"
                            CommandTarget="{Binding Path=., RelativeSource={RelativeSource AncestorType={x:Type local:ButtonRingItem}}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>